// Code generated by protoc-gen-go.
// source: server.proto
// DO NOT EDIT!

/*
Package discogsserver is a generated protocol buffer package.

It is generated from these files:
	server.proto

It has these top-level messages:
	ReleaseMetadata
	Empty
	FolderList
	ReleaseList
	ReleaseMove
	MetadataUpdate
*/
package discogsserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import godiscogs "github.com/brotherlogic/godiscogs"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReleaseMetadata struct {
	// The date the release was added
	DateAdded int64 `protobuf:"varint,1,opt,name=date_added,json=dateAdded" json:"date_added,omitempty"`
	// The date the release was last refreshed
	DateRefreshed int64 `protobuf:"varint,2,opt,name=date_refreshed,json=dateRefreshed" json:"date_refreshed,omitempty"`
	// The path to the file on iTunes if available
	FilePath string `protobuf:"bytes,3,opt,name=file_path,json=filePath" json:"file_path,omitempty"`
}

func (m *ReleaseMetadata) Reset()                    { *m = ReleaseMetadata{} }
func (m *ReleaseMetadata) String() string            { return proto.CompactTextString(m) }
func (*ReleaseMetadata) ProtoMessage()               {}
func (*ReleaseMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type FolderList struct {
	Folders []*godiscogs.Folder `protobuf:"bytes,1,rep,name=folders" json:"folders,omitempty"`
}

func (m *FolderList) Reset()                    { *m = FolderList{} }
func (m *FolderList) String() string            { return proto.CompactTextString(m) }
func (*FolderList) ProtoMessage()               {}
func (*FolderList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FolderList) GetFolders() []*godiscogs.Folder {
	if m != nil {
		return m.Folders
	}
	return nil
}

type ReleaseList struct {
	Releases []*godiscogs.Release `protobuf:"bytes,1,rep,name=releases" json:"releases,omitempty"`
}

func (m *ReleaseList) Reset()                    { *m = ReleaseList{} }
func (m *ReleaseList) String() string            { return proto.CompactTextString(m) }
func (*ReleaseList) ProtoMessage()               {}
func (*ReleaseList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ReleaseList) GetReleases() []*godiscogs.Release {
	if m != nil {
		return m.Releases
	}
	return nil
}

type ReleaseMove struct {
	Release     *godiscogs.Release `protobuf:"bytes,1,opt,name=release" json:"release,omitempty"`
	NewFolderId int32              `protobuf:"varint,2,opt,name=new_folder_id,json=newFolderId" json:"new_folder_id,omitempty"`
}

func (m *ReleaseMove) Reset()                    { *m = ReleaseMove{} }
func (m *ReleaseMove) String() string            { return proto.CompactTextString(m) }
func (*ReleaseMove) ProtoMessage()               {}
func (*ReleaseMove) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ReleaseMove) GetRelease() *godiscogs.Release {
	if m != nil {
		return m.Release
	}
	return nil
}

type MetadataUpdate struct {
	Release *godiscogs.Release `protobuf:"bytes,1,opt,name=release" json:"release,omitempty"`
	Update  *ReleaseMetadata   `protobuf:"bytes,2,opt,name=update" json:"update,omitempty"`
}

func (m *MetadataUpdate) Reset()                    { *m = MetadataUpdate{} }
func (m *MetadataUpdate) String() string            { return proto.CompactTextString(m) }
func (*MetadataUpdate) ProtoMessage()               {}
func (*MetadataUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MetadataUpdate) GetRelease() *godiscogs.Release {
	if m != nil {
		return m.Release
	}
	return nil
}

func (m *MetadataUpdate) GetUpdate() *ReleaseMetadata {
	if m != nil {
		return m.Update
	}
	return nil
}

func init() {
	proto.RegisterType((*ReleaseMetadata)(nil), "discogsserver.ReleaseMetadata")
	proto.RegisterType((*Empty)(nil), "discogsserver.Empty")
	proto.RegisterType((*FolderList)(nil), "discogsserver.FolderList")
	proto.RegisterType((*ReleaseList)(nil), "discogsserver.ReleaseList")
	proto.RegisterType((*ReleaseMove)(nil), "discogsserver.ReleaseMove")
	proto.RegisterType((*MetadataUpdate)(nil), "discogsserver.MetadataUpdate")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for DiscogsService service

type DiscogsServiceClient interface {
	GetCollection(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ReleaseList, error)
	GetReleasesInFolder(ctx context.Context, in *FolderList, opts ...grpc.CallOption) (*ReleaseList, error)
	MoveToFolder(ctx context.Context, in *ReleaseMove, opts ...grpc.CallOption) (*Empty, error)
	AddToFolder(ctx context.Context, in *ReleaseMove, opts ...grpc.CallOption) (*Empty, error)
	UpdateMetadata(ctx context.Context, in *MetadataUpdate, opts ...grpc.CallOption) (*ReleaseMetadata, error)
	GetMetadata(ctx context.Context, in *godiscogs.Release, opts ...grpc.CallOption) (*ReleaseMetadata, error)
}

type discogsServiceClient struct {
	cc *grpc.ClientConn
}

func NewDiscogsServiceClient(cc *grpc.ClientConn) DiscogsServiceClient {
	return &discogsServiceClient{cc}
}

func (c *discogsServiceClient) GetCollection(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ReleaseList, error) {
	out := new(ReleaseList)
	err := grpc.Invoke(ctx, "/discogsserver.DiscogsService/GetCollection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discogsServiceClient) GetReleasesInFolder(ctx context.Context, in *FolderList, opts ...grpc.CallOption) (*ReleaseList, error) {
	out := new(ReleaseList)
	err := grpc.Invoke(ctx, "/discogsserver.DiscogsService/GetReleasesInFolder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discogsServiceClient) MoveToFolder(ctx context.Context, in *ReleaseMove, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/discogsserver.DiscogsService/MoveToFolder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discogsServiceClient) AddToFolder(ctx context.Context, in *ReleaseMove, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/discogsserver.DiscogsService/AddToFolder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discogsServiceClient) UpdateMetadata(ctx context.Context, in *MetadataUpdate, opts ...grpc.CallOption) (*ReleaseMetadata, error) {
	out := new(ReleaseMetadata)
	err := grpc.Invoke(ctx, "/discogsserver.DiscogsService/UpdateMetadata", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discogsServiceClient) GetMetadata(ctx context.Context, in *godiscogs.Release, opts ...grpc.CallOption) (*ReleaseMetadata, error) {
	out := new(ReleaseMetadata)
	err := grpc.Invoke(ctx, "/discogsserver.DiscogsService/GetMetadata", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DiscogsService service

type DiscogsServiceServer interface {
	GetCollection(context.Context, *Empty) (*ReleaseList, error)
	GetReleasesInFolder(context.Context, *FolderList) (*ReleaseList, error)
	MoveToFolder(context.Context, *ReleaseMove) (*Empty, error)
	AddToFolder(context.Context, *ReleaseMove) (*Empty, error)
	UpdateMetadata(context.Context, *MetadataUpdate) (*ReleaseMetadata, error)
	GetMetadata(context.Context, *godiscogs.Release) (*ReleaseMetadata, error)
}

func RegisterDiscogsServiceServer(s *grpc.Server, srv DiscogsServiceServer) {
	s.RegisterService(&_DiscogsService_serviceDesc, srv)
}

func _DiscogsService_GetCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscogsServiceServer).GetCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discogsserver.DiscogsService/GetCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscogsServiceServer).GetCollection(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscogsService_GetReleasesInFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FolderList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscogsServiceServer).GetReleasesInFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discogsserver.DiscogsService/GetReleasesInFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscogsServiceServer).GetReleasesInFolder(ctx, req.(*FolderList))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscogsService_MoveToFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseMove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscogsServiceServer).MoveToFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discogsserver.DiscogsService/MoveToFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscogsServiceServer).MoveToFolder(ctx, req.(*ReleaseMove))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscogsService_AddToFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseMove)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscogsServiceServer).AddToFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discogsserver.DiscogsService/AddToFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscogsServiceServer).AddToFolder(ctx, req.(*ReleaseMove))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscogsService_UpdateMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetadataUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscogsServiceServer).UpdateMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discogsserver.DiscogsService/UpdateMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscogsServiceServer).UpdateMetadata(ctx, req.(*MetadataUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscogsService_GetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(godiscogs.Release)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscogsServiceServer).GetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discogsserver.DiscogsService/GetMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscogsServiceServer).GetMetadata(ctx, req.(*godiscogs.Release))
	}
	return interceptor(ctx, in, info, handler)
}

var _DiscogsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "discogsserver.DiscogsService",
	HandlerType: (*DiscogsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCollection",
			Handler:    _DiscogsService_GetCollection_Handler,
		},
		{
			MethodName: "GetReleasesInFolder",
			Handler:    _DiscogsService_GetReleasesInFolder_Handler,
		},
		{
			MethodName: "MoveToFolder",
			Handler:    _DiscogsService_MoveToFolder_Handler,
		},
		{
			MethodName: "AddToFolder",
			Handler:    _DiscogsService_AddToFolder_Handler,
		},
		{
			MethodName: "UpdateMetadata",
			Handler:    _DiscogsService_UpdateMetadata_Handler,
		},
		{
			MethodName: "GetMetadata",
			Handler:    _DiscogsService_GetMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("server.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x93, 0x5f, 0x6b, 0xd4, 0x40,
	0x14, 0xc5, 0xad, 0x4b, 0xbb, 0xdd, 0x9b, 0x26, 0xe2, 0xe8, 0x43, 0x8d, 0x28, 0x32, 0x20, 0x14,
	0x94, 0x14, 0x57, 0x10, 0x7c, 0xf0, 0xa1, 0xae, 0x7f, 0x28, 0x58, 0xd1, 0x51, 0x9f, 0x43, 0x36,
	0xb9, 0x9b, 0x0c, 0xa4, 0x3b, 0x61, 0x66, 0xba, 0xe2, 0xf7, 0xf3, 0x83, 0x39, 0x7f, 0x92, 0x8d,
	0x0d, 0x91, 0x45, 0xfa, 0xb4, 0x3b, 0x67, 0x7e, 0xf7, 0xcc, 0x9d, 0x7b, 0x26, 0x70, 0xa4, 0x50,
	0x6e, 0x50, 0x26, 0x8d, 0x14, 0x5a, 0x90, 0xb0, 0xe0, 0x2a, 0x17, 0xa5, 0xf2, 0x62, 0xfc, 0xa2,
	0xe4, 0xba, 0xba, 0x5a, 0x26, 0xb9, 0xb8, 0x3c, 0x5d, 0x1a, 0xa0, 0x42, 0x59, 0x8b, 0x92, 0xe7,
	0xa7, 0xa5, 0x68, 0xc1, 0xfe, 0x9f, 0x77, 0xa0, 0x1a, 0xee, 0x30, 0xac, 0x31, 0x53, 0x78, 0x81,
	0x3a, 0x2b, 0x32, 0x9d, 0x91, 0x47, 0x00, 0xe6, 0x17, 0xd3, 0xac, 0x28, 0xb0, 0x38, 0xde, 0x7b,
	0xb2, 0x77, 0x32, 0x61, 0x33, 0xab, 0x9c, 0x59, 0x81, 0x3c, 0x85, 0xc8, 0x6d, 0x4b, 0x5c, 0x49,
	0x54, 0x95, 0x41, 0x6e, 0x3b, 0x24, 0xb4, 0x2a, 0xeb, 0x44, 0xf2, 0x10, 0x66, 0x2b, 0x5e, 0x63,
	0xda, 0x64, 0xba, 0x3a, 0x9e, 0x18, 0x62, 0xc6, 0x0e, 0xad, 0xf0, 0xc5, 0xac, 0xe9, 0x14, 0xf6,
	0xdf, 0x5f, 0x36, 0xfa, 0x17, 0x7d, 0x0d, 0xf0, 0x41, 0xd4, 0x05, 0xca, 0x4f, 0x5c, 0x69, 0xf2,
	0x0c, 0xa6, 0x2b, 0xb7, 0x52, 0xe6, 0xd8, 0xc9, 0x49, 0x30, 0xbf, 0x9b, 0xf4, 0xfd, 0x7a, 0x8e,
	0x75, 0x04, 0x7d, 0x03, 0x41, 0xdb, 0xb9, 0xab, 0x4d, 0xe0, 0x50, 0xfa, 0x65, 0x57, 0x4c, 0xfe,
	0x2a, 0x6e, 0x49, 0xb6, 0x65, 0x68, 0xba, 0x2d, 0xbf, 0x10, 0x1b, 0x24, 0xcf, 0x61, 0xda, 0x6e,
	0xb9, 0x1b, 0x8f, 0x57, 0x77, 0x08, 0xa1, 0x10, 0xae, 0xf1, 0x67, 0xea, 0x5b, 0x49, 0xb9, 0x1f,
	0xc1, 0x3e, 0x0b, 0x8c, 0xe8, 0xdb, 0x3c, 0x2f, 0xe8, 0x06, 0xa2, 0x6e, 0xa4, 0x3f, 0x1a, 0x3b,
	0x9b, 0xff, 0x3c, 0xe3, 0x15, 0x1c, 0x5c, 0xb9, 0x3a, 0x67, 0x1e, 0xcc, 0x1f, 0x27, 0xd7, 0xc2,
	0x4e, 0x06, 0xb1, 0xb1, 0x96, 0x9e, 0xff, 0x9e, 0x40, 0xf4, 0xce, 0x93, 0xdf, 0x0c, 0xc9, 0x73,
	0x24, 0x0b, 0x08, 0x3f, 0xa2, 0x5e, 0x88, 0xba, 0xc6, 0x5c, 0x73, 0xb1, 0x26, 0xf7, 0x07, 0x5e,
	0x2e, 0x8c, 0x38, 0x1e, 0x3f, 0xc1, 0x8e, 0x97, 0xde, 0x22, 0x9f, 0xe1, 0x9e, 0x31, 0x69, 0x35,
	0x75, 0xbe, 0xf6, 0x17, 0x25, 0x0f, 0x06, 0x45, 0x7d, 0x9c, 0x3b, 0xfc, 0xde, 0xc2, 0x91, 0x9d,
	0xfc, 0x77, 0xd1, 0x1a, 0xfd, 0x83, 0xb6, 0x4c, 0x3c, 0xda, 0xaf, 0xf1, 0x38, 0x83, 0xc0, 0x3c,
	0xca, 0x1b, 0x59, 0x7c, 0x85, 0xc8, 0xc7, 0xd3, 0xbf, 0xff, 0x01, 0x79, 0x3d, 0xc5, 0x78, 0x47,
	0x0e, 0xc6, 0x72, 0x01, 0x81, 0x99, 0xd4, 0xd6, 0x6f, 0x24, 0xe5, 0xdd, 0x26, 0xcb, 0x03, 0xf7,
	0x7d, 0xbe, 0xfc, 0x13, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x65, 0x63, 0xa1, 0xf1, 0x03, 0x00, 0x00,
}
